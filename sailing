#!/usr/bin/env python3
# Copyright (c) 2019-2025 Benjamin Holt -- MIT License

"""
Tiny, seemingly pointless, interactive fiction game to play with a state machine.
"""
from pprint import pp
import random
import time

from helpers import in_test, pretty
from  smallmachine import StateMachine
#####


###  Helpers  ###
def adlib(x, joiner=" "):
    "Dynamically assemble messages from nested collections of parts.  Tuples are pieces to be strung together, lists are variants to choose among; anything else is used as a string"
    if type(x) is tuple:
        return joiner.join( adlib(i) for i in x )  # Joining with "|" can be helpful to see how messages get put together
    if type(x) is list:
        return adlib(random.choice(x))
    return str(x)


class Location:
    def __init__(self, name, description):
        self.name = name
        self.description = description


    # Demonstrate a simple enter-action pattern
    def enter(self, **_):
        """Enter action: describe the location"""
        return adlib(self.description)


    def __str__(self):
        return self.name


    def __repr__(self):
        return f"<{self.__class__.__name__} {self.name}>"


    @classmethod
    def enter_action(cls, state, destination, **ctx):
        l = destination if destination is not ... else state
        if isinstance(l, cls):
            return l.enter(state=state, destination=destination, **ctx)
#####


###  Fixtures  ###
above = Location(
    "above", 
    ("You are on the deck of a small sailboat on a", ["calm", "serene", "blue", "clear", "glistening",], "sea; an open hatch leads down.")
)


below = Location(
    "below", 
    ("You are in the", ["cozy", "homey", "snug",], "cabin of a small boat, with just enough room for a bunk and a tiny desk with a logbook; a hatch leads up.")
)


messages = {
    "sail": ("You", ["set", "adjust", "tack",], "your sail", ["to", "toward", "for"], "{}."),
    "sleep": ("The bunk is", ["soft", "comfortable", "warm", "cozy",], "and you", ["rest", "sleep", "snooze", "nap", "doze",], ["well", "deeply", "blissfully", "nicely"], "."),
    "log": [("Weather was", ["fair", "good", "lovely",], "."),
        (
            ["Good", "Quick", "Slow",], "sailing",
            [
                "today", 
                ("this", ["morning", "afternoon", "evening",], ".")
            ]
        ),
    ],
}
#####


###  Tests & Actions  ###
@pretty
def not_crash_test(input, **_):
    return input != "crash"


@pretty
def sail_action(**_):
    s = input("Where to? > ")
    return adlib(messages["sail"]).format(s)


log_entries = [(["Fair", "Nice", "Brisk",], "weather."),]  # HACK: Put one bogus entry in 'cos random.choice (in adlib) can't handle an empty list
@pretty
def write_action(**_):
    s = input("What do you want to say? > ")
    log_entries.append(s)
    return "Written"


@pretty
def explode_action(**_):
    raise ValueError("Ka-Boom!")
#####


###  Rules  ###
rules = {
    "start": [
        ("start", not_crash_test, pretty(Location.enter_action), above),
    ],
    above: [
        ("go below", in_test("d", "down", "below"), pretty(Location.enter_action), below),
        ("sail", in_test("s", "sail"), sail_action, ...),
    ],
    below: [
        ("go above", in_test("u", "up", "above"), pretty(Location.enter_action), above),
        ("read log", in_test("r", "read", "read logbook"), pretty((lambda **_: adlib([messages["log"], log_entries])), "read_log_action"), ...),
        ("write log", in_test("w", "write", "log"), write_action, ...),
        ("sleep", in_test("s", "sleep", "bunk", "lie down", "lay down", "nap"), pretty((lambda **_: adlib(messages["sleep"])), "sleep_action"), ...),
    ],
    ...: [  # Global rules
        ("look", in_test("l", "look"), pretty(Location.enter_action), ...),

        # Inspection:
        ("scry", "scry", pretty((lambda machine, **_: pp(machine.pp_dict())), "scry"), ...),

        # Exception testing commands:
        ("kaboom", "kaboom", explode_action, ...),  # raises ValueError
        ("warp", "warp", "Warp out of this dimension", "elsewhere"),  # Transition to a non-existent state
        ("anything except crash", not_crash_test, "Sorry, you can't do that.", ...),  # Doesn't recognize input "crash"
    ]
}
#####


###  World  ###
world = StateMachine(rules, "start")
# world = StateMachine(rules, "start", tracer=True)  # Default prefix
# world = StateMachine(rules, "start", tracer="***")  # Custom prefix
#####


###  Main  ###
print("Smooth Sailing", flush=True)
time.sleep(0.1)  # HACK: wait for flush; sometimes prompt prints out-of-order with print output in spite of flush=True
out = world(input("Press enter to start. "))
if out:
    print(out, flush=True)
while True:
    time.sleep(0.1)  # HACK: wait for flush
    out = world(input("> "))
    if out:
        print(out, flush=True)
#####
