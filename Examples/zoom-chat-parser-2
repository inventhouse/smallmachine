#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# zoom-chat-parser: Copyright © 2024-2025 Benjamin Holt - MIT License

from pprint import pp

from helpers import match_test, pretty
from smallmachine import StateMachine
#####


###  Input Fixture  ###
chat_lines = """
15:01:39 From Michael M to Everyone:
    When are we going to have AI run team summit?
15:01:45 From Jared R to Everyone:
    Anyone still remember NFTs?
15:01:47 From Aaron S to Everyone:
    Replying to "When are we going to..."
    
    We already do
15:01:53 From Aaron S to Everyone:
    Replying to "When are we going to..."
    
    Gabe.ai
15:01:53 From Michael M to Everyone:
    Reacted to "We already do" with 😂
15:03:00 From Matt T to Ben H:
    Hi BenH!
15:04:53 From Aaron S to Ben H:
    Replying to "When are we going to..."
    
    Right??
15:07:18 From Becca S to Everyone:
    Reacted to "Anyone still remember ..." with 👏🏼
15:07:20 From Becca S to Everyone:
    Removed a 👏🏼 reaction from "Anyone still remember ..."
"""
#####


###  Chat Parser  ###
class ChatParser:
    def __init__(self):
        blank_test = match_test(r"\s*$")
        header_test = match_test(r"(?P<time_str>(?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2})) From (?P<from>.+?) to (?P<to>.+?):")
        reaction_test = match_test(r'\s+Reacted to "(?P<prefix>.+?)([.]{3})?" with (?P<reaction>.+)')
        remove_reaction_test = match_test(r'\s+Removed a (?P<reaction>.+?) reaction from "(?P<prefix>.+?)([.]{3})?"')
        reply_test = match_test(r'\s+Replying to "(?P<prefix>.+?)([.]{3})?"')
        message_line_test = match_test(r"\s+(?P<line>.*)")

        rules = {
            "start": [
                ("header", header_test, None, "message"),
                ("blank", blank_test, None, ...),
            ],
            "message": [
                # Reactions do not have any other lines, back to the top state
                ("reaction", reaction_test, None, "start"),
                ("remove_reaction", remove_reaction_test, None, "start"),
                ("reply", reply_test, None, "reply_blank"),
                ("line", message_line_test, None, "message_lines"),
            ],
            "reply_blank": [
                # Blank line between "Replying to" and message is part of the format, not part of the message
                ("blank", blank_test, None, "message_lines"),
                ("line", message_line_test, None, "message_lines"),  # Found a case where reply did not have a blank line
            ],
            "message_lines": [
                ("header", header_test, None, "message"),
                ("line", message_line_test, None, ...),
                ("blank", blank_test, None, ...),  # Ignore blank lines that are not part of the message (i.e. no indent)
            ],
            # ...: [  # Be sure to take this out so any cases we haven't covered will raise an error
            #     ("null", pretty((lambda **_: True), "true"), None, ...),
            # ],
        }
        self.parser = StateMachine(rules, "start", tracer=True)

    def __call__(self, lines):
        for line in lines:
            self.parser(line)
#####


###  Main  ###
if __name__ == "__main__":
    import sys
    chat_parser = ChatParser()
    pp(chat_parser.parser.pp_dict())

    chat_file = sys.argv[1] if len(sys.argv) > 1 else None
    if chat_file:
        with open(chat_file) as f:
            chat_parser(f)
    else:
        chat_parser(chat_lines.split("\n"))
#####
